{"version":3,"sources":["components/Hooks/dateBuilder.js","components/LocationContainer.js","components/TempContainer.js","components/WeatherContainer.js","components/CurrentWeatherContainer.js","components/ErrorMessageContainer.js","styles/styles.js","components/DailyForecastDisplay.js","components/HourlyForecastDisplay.js","components/ForecastContainer.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["dateBuilder","d","day","getDay","date","getDate","month","getMonth","LocationContainer","location","country","Box","marginBottom","Container","className","Typography","variant","align","color","Date","TempContainer","temp","Math","round","feels_like","temp_max","temp_min","WeatherContainer","weather","CurrentWeatherContainer","sys","name","main","ErrorMessageContainer","queryError","useStyles","makeStyles","input","borderBottom","margin","fontSize","cardWarm","minWidth","width","backgroundColor","cardCold","forecast","position","bottom","theme","createTheme","palette","primary","blueGrey","secondary","amber","DailyForecastDisplay","classes","dt","Card","CardContent","component","max","min","HourlyForecastDisplay","hourData","hour","getHours","ForecastContainer","toggleDaily","toggleHourly","dailyActive","sx","display","justifyContent","ButtonGroup","Button","onClick","overflow","overflowX","maxWidth","gap","map","dayData","uuidv4","SearchBar","props","TextField","type","placeholder","fullWidth","onChange","value","onKeyPress","keyPress","InputProps","api","process","App","useState","query","setQuery","setWeather","setQueryError","dailyForecast","setDailyForecast","hourlyForecast","setHourlyForecast","setDailyActive","isInitialMount","useRef","useEffect","current","fetch","coord","lat","lon","then","response","json","data","daily","hourly","catch","error","console","log","ThemeProvider","e","key","cod","err","message","toUpperCase","target","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76bc7757.chunk.js","sourcesContent":["function dateBuilder(d) {\n  let months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n\n  return `${day} ${date} ${month}`;\n}\n\nexport default dateBuilder;\n","import React from \"react\";\nimport { Container, Typography, Box } from \"@material-ui/core\";\nimport dateBuilder from \"./Hooks/dateBuilder\";\n\nfunction LocationContainer({ location, country }) {\n  return (\n    <Box marginBottom={3}>\n      <Container className='location-container'>\n        <Typography variant='h2' align='center' color='primary'>\n          {location}, {country}\n        </Typography>\n        <Typography variant='h4' align='center' color='secondary'>\n          {dateBuilder(new Date())}\n        </Typography>\n      </Container>\n    </Box>\n  );\n}\n\nexport default LocationContainer;\n","import React from \"react\";\nimport { Box, Container, Typography } from \"@material-ui/core\";\n\nfunction TempContainer({ variant, temp }) {\n  return (\n    <Box marginBottom={2}>\n      <Container className='temp-container'>\n        <Typography variant={variant} align='center' color='primary'>\n          Current: {Math.round(temp.feels_like)}° F\n        </Typography>\n        <Typography variant={variant} align='center' color='primary'>\n          High: {Math.round(temp.temp_max)}°F\n        </Typography>\n        <Typography variant={variant} align='center' color='primary'>\n          Low: {Math.round(temp.temp_min)}°F\n        </Typography>\n      </Container>\n    </Box>\n  );\n}\n\nexport default TempContainer;\n","import React from \"react\";\nimport { Box, Container, Typography } from \"@material-ui/core\";\n\nfunction WeatherContainer({ variant, weather }) {\n  return (\n    <Box>\n      <Container className='weather-container'>\n        <Typography variant={variant} align='center' color='secondary'>\n          {weather}\n        </Typography>\n      </Container>\n    </Box>\n  );\n}\n\nexport default WeatherContainer;\n","import React from \"react\";\nimport LocationContainer from \"./LocationContainer\";\nimport TempContainer from \"./TempContainer\";\nimport WeatherContainer from \"./WeatherContainer\";\n\nfunction CurrentWeatherContainer({ weather }) {\n  return (\n    <>\n      <LocationContainer\n        country={weather.sys.country}\n        location={weather.name}\n      />\n      <TempContainer variant='h4' temp={weather.main} />\n      <WeatherContainer variant='h4' weather={weather.weather[0].main} />\n    </>\n  );\n}\n\nexport default CurrentWeatherContainer;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nfunction ErrorMessageContainer({ queryError }) {\n  return (\n    <Typography variant='h4' color='primary' align='center'>\n      {queryError}\n    </Typography>\n  );\n}\n\nexport default ErrorMessageContainer;\n","import { makeStyles, createTheme } from \"@material-ui/core/styles\";\nimport { amber, blueGrey } from \"@material-ui/core/colors\";\n\nexport const useStyles = makeStyles({\n  input: {\n    \"& .MuiInput-underline:before\": {\n      borderBottom: \"2px solid white\",\n    },\n    \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": {\n      borderBottom: \"2px solid white\",\n    },\n    margin: \"15px 0px\",\n    color: \"white !important\",\n    fontSize: \"24px !important\",\n  },\n  cardWarm: {\n    minWidth: \"200px\",\n    width: \"200px\",\n    backgroundColor: \"rgba(255,255,255, 0.1)\",\n    color: \"white\",\n  },\n  cardCold: {\n    minWidth: \"200px\",\n    width: \"200px\",\n    backgroundColor: \"rgba(0,0,0, 0.3)\",\n    color: \"white\",\n  },\n  forecast: {\n    position: \"relative \",\n    bottom: 0,\n  },\n});\n\nexport const theme = createTheme({\n  palette: {\n    primary: {\n      main: blueGrey[100],\n    },\n    secondary: {\n      main: amber[400],\n    },\n  },\n});\n","import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { useStyles } from \"../styles/styles\";\nimport dateBuilder from \"./Hooks/dateBuilder\";\nimport WeatherContainer from \"./WeatherContainer\";\n\nfunction DailyForecastDisplay({ weather, day }) {\n  const classes = useStyles();\n\n  let date = dateBuilder(new Date(day.dt * 1000));\n  return (\n    <Card\n      variant='outlined'\n      className={weather.main.temp > \"70\" ? classes.cardWarm : classes.cardCold}\n    >\n      <CardContent>\n        <Typography variant='h6' align='center' color='secondary'>\n          {date}\n        </Typography>\n        <br />\n        <Typography variant='h6' component='p' align='center' color='primary'>\n          High: {Math.round(day.temp.max)}°F\n        </Typography>\n        <Typography variant='h6' component='p' align='center' color='primary'>\n          Low: {Math.round(day.temp.min)}°F\n        </Typography>\n        <WeatherContainer variant='h6' weather={day.weather[0].main} />\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default DailyForecastDisplay;\n","import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { useStyles } from \"../styles/styles\";\nimport WeatherContainer from \"./WeatherContainer\";\n\nfunction HourlyForecastDisplay({ weather, hourData }) {\n  const classes = useStyles();\n\n  let hour = new Date(hourData.dt * 1000).getHours();\n  return (\n    <Card variant='outlined' className={classes.cardWarm}>\n      <CardContent>\n        <Typography variant='h6' align='center' color='secondary'>\n          {hour > 12 ? hour - 12 : hour} {hour < 12 ? \"AM\" : \"PM\"}\n        </Typography>\n        <Typography variant='h6' align='center' color='primary'>\n          {Math.round(hourData.temp)}°F\n        </Typography>\n        <Typography variant='h6' align='center' color='secondary'>\n          {hourData.weather[0].main}\n        </Typography>\n      </CardContent>\n      {/* <CardContent>\n        <Typography variant='h6' align='center' color='secondary'>\n          {hour}\n        </Typography>\n        <br />\n        <Typography variant='h6' component='p' align='center' color='primary'>\n          High: {Math.round(day.temp.max)}°F\n        </Typography>\n        <Typography variant='h6' component='p' align='center' color='primary'>\n          Low: {Math.round(day.temp.min)}°F\n        </Typography>\n        <WeatherContainer variant='h6' weather={day.weather[0].main} />\n      </CardContent> */}\n    </Card>\n  );\n}\n\nexport default HourlyForecastDisplay;\n","import { Box, Button, ButtonGroup, Container } from \"@material-ui/core\";\nimport React from \"react\";\nimport DailyForecastDisplay from \"./DailyForecastDisplay\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport HourlyForecastDisplay from \"./HourlyForecastDisplay\";\n\nfunction ForecastContainer({\n  weather,\n  toggleDaily,\n  toggleHourly,\n  dailyActive,\n  forecast,\n}) {\n  return (\n    <Container sx={{ marginBottom: 100 }}>\n      <Box\n        sx={{ display: \"flex\", justifyContent: \"center\", marginBottom: \"20px\" }}\n      >\n        {/* Button Container to toggle between daily and hourly forecast */}\n        <ButtonGroup>\n          <Button\n            variant={dailyActive ? \"contained\" : \"outlined\"}\n            color={dailyActive ? \"secondary\" : \"primary\"}\n            onClick={toggleDaily}\n          >\n            Daily\n          </Button>\n          <Button\n            variant={dailyActive ? \"outlined\" : \"contained\"}\n            color={dailyActive ? \"primary\" : \"secondary\"}\n            onClick={toggleHourly}\n          >\n            Hourly\n          </Button>\n        </ButtonGroup>\n      </Box>\n\n      <Box\n        sx={{\n          display: \"flex\",\n          overflow: \"hidden\",\n          overflowX: \"scroll\",\n          maxWidth: \"90%\",\n          margin: \"0 auto\",\n          gap: 6,\n        }}\n      >\n        {dailyActive\n          ? forecast.map((dayData) => {\n              return (\n                <DailyForecastDisplay\n                  weather={weather}\n                  key={uuidv4()}\n                  day={dayData}\n                />\n              );\n            })\n          : forecast.map((hourData) => {\n              return (\n                <HourlyForecastDisplay\n                  weather={weather}\n                  key={uuidv4()}\n                  hourData={hourData}\n                />\n              );\n            })}\n      </Box>\n    </Container>\n  );\n}\n\nexport default ForecastContainer;\n","import React from \"react\";\nimport { Box, Container, TextField } from \"@material-ui/core\";\nimport { useStyles } from \"../styles/styles\";\n\nfunction SearchBar(props) {\n  const classes = useStyles();\n  return (\n    <Box marginBottom={3}>\n      <Container maxWidth='sm'>\n        <TextField\n          variant='standard'\n          type='text'\n          placeholder='Search...'\n          fullWidth\n          color='secondary'\n          onChange={props.onChange}\n          value={props.value}\n          onKeyPress={props.keyPress}\n          InputProps={{\n            className: classes.input,\n          }}\n          className={classes.input}\n        />\n      </Container>\n    </Box>\n  );\n}\n\nexport default SearchBar;\n","import { ThemeProvider } from \"@material-ui/core\";\nimport { useState, useEffect, useRef } from \"react\";\nimport CurrentWeatherContainer from \"./components/CurrentWeatherContainer\";\nimport ErrorMessageContainer from \"./components/ErrorMessageContainer\";\nimport ForecastContainer from \"./components/ForecastContainer\";\nimport SearchBar from \"./components/SearchBar\";\n\nimport { theme } from \"./styles/styles\";\n\nimport { useStyles } from \"./styles/styles\";\n\nconst api = {\n  key: process.env.REACT_APP_WEATHER_API_KEY,\n  base: \"https://api.openweathermap.org/data/2.5/\",\n  forecastBase: \"https://api.openweathermap.org/data/2.5/onecall?\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [queryError, setQueryError] = useState(\"\");\n  const [dailyForecast, setDailyForecast] = useState([]);\n  const [hourlyForecast, setHourlyForecast] = useState([]);\n  const [dailyActive, setDailyActive] = useState(true);\n\n  const classes = useStyles();\n\n  // Fetch data from OpenWeatherMap API and update weather state with response.\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=imperial&APPID=${api.key}`)\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.cod === \"404\") {\n            throw data;\n          } else {\n            setWeather(data);\n            setQuery(\"\");\n            setQueryError(\"\");\n            setDailyActive(true);\n          }\n        })\n        .catch((err) => {\n          setQueryError(err.message.toUpperCase());\n          setWeather(\"\");\n        });\n    }\n  };\n\n  //Prevent update on mount, which allows me to fetch forecast data after inital query of current weather. Only update if weather state changes.\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    //Function to retrieve forecast data.\n    const fetchForecast = () => {\n      fetch(\n        `${api.forecastBase}lat=${weather.coord.lat}&lon=${weather.coord.lon}&units=imperial&exclude=minutely&appid=${api.key}`\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          setDailyForecast(data.daily);\n          setHourlyForecast(data.hourly);\n        })\n        .catch((error) => console.log(error));\n    };\n\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      // If location invalid, do not run functions.\n      if (!weather) {\n        return;\n      } else {\n        fetchForecast();\n      }\n    }\n  }, [weather]);\n\n  const toggleDaily = () => {\n    setDailyActive(true);\n  };\n  const toggleHourly = () => {\n    setDailyActive(false);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div\n        // Conditionally render background image depending on temperature.\n        className={\n          typeof weather.main !== \"undefined\"\n            ? weather.main.temp > \"70\"\n              ? \"app\"\n              : \"app cold\"\n            : \"app\"\n        }\n      >\n        <main>\n          <SearchBar\n            keyPress={search}\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n          />\n          {/* Conditionally render data interface after API call. If no data found, render error msg */}\n          {typeof weather.main !== \"undefined\" ? (\n            <>\n              <CurrentWeatherContainer weather={weather} />\n            </>\n          ) : (\n            <></>\n          )}\n          {/* If query is incorrect, render error message */}\n          {queryError !== \"\" ? (\n            <ErrorMessageContainer queryError={queryError} />\n          ) : (\n            <></>\n          )}\n          {/* Only render forecast data if query is correct and data is retrieved for current weather info */}\n          {typeof weather.main !== \"undefined\" && dailyForecast ? (\n            <section className={classes.forecast}>\n              <ForecastContainer\n                weather={weather}\n                toggleDaily={toggleDaily}\n                toggleHourly={toggleHourly}\n                dailyActive={dailyActive}\n                forecast={\n                  dailyActive\n                    ? dailyForecast.slice(1)\n                    : hourlyForecast.slice(1, 13)\n                }\n              />\n            </section>\n          ) : (\n            <></>\n          )}\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}