{"version":3,"sources":["components/Hooks/dateBuilder.js","components/LocationContainer.js","components/TempContainer.js","components/WeatherContainer.js","components/CurrentWeatherContainer.js","components/ErrorMessageContainer.js","styles/styles.js","components/ForecastContainer.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["dateBuilder","d","day","getDay","date","getDate","month","getMonth","LocationContainer","location","country","Box","marginBottom","Container","className","Typography","variant","align","color","Date","TempContainer","temp","Math","round","feels_like","temp_max","temp_min","WeatherContainer","weather","CurrentWeatherContainer","sys","name","main","ErrorMessageContainer","queryError","useStyles","makeStyles","input","borderBottom","margin","fontSize","card","minWidth","backgroundColor","forecast","position","bottom","theme","createTheme","palette","primary","blueGrey","secondary","amber","ForecastContainer","classes","Grid","sx","width","container","spacing","justifyContent","columns","map","dt","item","xs","sm","md","lg","Card","CardContent","component","max","min","SearchBar","props","maxWidth","TextField","type","placeholder","fullWidth","onChange","value","onKeyPress","keyPress","InputProps","api","process","App","useState","query","setQuery","setWeather","setQueryError","setForecast","isInitialMount","useRef","useEffect","current","fetch","coord","lat","lon","then","response","json","data","daily","catch","error","console","log","ThemeProvider","e","key","cod","err","message","toUpperCase","target","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1e65712.chunk.js","sourcesContent":["function dateBuilder(d) {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n\n  return `${day} ${date} ${month}`;\n}\n\nexport default dateBuilder;\n","import React from \"react\";\nimport { Container, Typography, Box } from \"@material-ui/core\";\nimport dateBuilder from \"./Hooks/dateBuilder\";\n\nfunction LocationContainer({ location, country }) {\n  return (\n    <Box marginBottom={3}>\n      <Container className='location-container'>\n        <Typography variant='h2' align='center' color='primary'>\n          {location}, {country}\n        </Typography>\n        <Typography variant='h4' align='center' color='secondary'>\n          {dateBuilder(new Date())}\n        </Typography>\n      </Container>\n    </Box>\n  );\n}\n\nexport default LocationContainer;\n","import React from \"react\";\nimport { Box, Container, Typography } from \"@material-ui/core\";\n\nfunction TempContainer({ variant, temp }) {\n  return (\n    <Box marginBottom={2}>\n      <Container className='temp-container'>\n        <Typography variant={variant} align='center' color='primary'>\n          Current: {Math.round(temp.feels_like)}° F\n        </Typography>\n        <Typography variant={variant} align='center' color='primary'>\n          High: {Math.round(temp.temp_max)}°F\n        </Typography>\n        <Typography variant={variant} align='center' color='primary'>\n          Low: {Math.round(temp.temp_min)}°F\n        </Typography>\n      </Container>\n    </Box>\n  );\n}\n\nexport default TempContainer;\n","import React from \"react\";\nimport { Box, Container, Typography } from \"@material-ui/core\";\n\nfunction WeatherContainer({ variant, weather }) {\n  return (\n    <Box>\n      <Container className='weather-container'>\n        <Typography variant={variant} align='center' color='secondary'>\n          {weather}\n        </Typography>\n      </Container>\n    </Box>\n  );\n}\n\nexport default WeatherContainer;\n","import React from \"react\";\nimport LocationContainer from \"./LocationContainer\";\nimport TempContainer from \"./TempContainer\";\nimport WeatherContainer from \"./WeatherContainer\";\n\nfunction CurrentWeatherContainer({ weather }) {\n  return (\n    <>\n      <LocationContainer\n        country={weather.sys.country}\n        location={weather.name}\n      />\n      <TempContainer variant='h4' temp={weather.main} />\n      <WeatherContainer variant='h4' weather={weather.weather[0].main} />\n    </>\n  );\n}\n\nexport default CurrentWeatherContainer;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nfunction ErrorMessageContainer({ queryError }) {\n  return (\n    <Typography variant='h4' color='primary' align='center'>\n      {queryError}\n    </Typography>\n  );\n}\n\nexport default ErrorMessageContainer;\n","import { makeStyles, createTheme } from \"@material-ui/core/styles\";\nimport { amber, blueGrey } from \"@material-ui/core/colors\";\n\nexport const useStyles = makeStyles({\n  input: {\n    \"& .MuiInput-underline:before\": {\n      borderBottom: \"2px solid white\",\n    },\n    \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": {\n      borderBottom: \"2px solid white\",\n    },\n    margin: \"15px 0px\",\n    color: \"white\",\n    fontSize: \"24px\",\n  },\n  card: {\n    minWidth: \"200px\",\n    backgroundColor: \"rgba(0,0,0, 0.3)\",\n    color: \"white\",\n  },\n  forecast: {\n    position: \"relative \",\n    bottom: 0,\n  },\n});\n\nexport const theme = createTheme({\n  palette: {\n    primary: {\n      main: blueGrey[100],\n    },\n    secondary: {\n      main: amber[400],\n    },\n  },\n});\n","import { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStyles } from \"../styles/styles\";\nimport WeatherContainer from \"./WeatherContainer\";\nimport dateBuilder from \"./Hooks/dateBuilder\";\n\nfunction ForecastContainer({ forecast }) {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      sx={{ width: \"100%\" }}\n      container\n      spacing={1}\n      justifyContent='center'\n      columns={7}\n    >\n      {forecast.map((day) => {\n        let date = dateBuilder(new Date(day.dt * 1000));\n        return (\n          <Grid item xs={9} sm={4} md={4} lg={3}>\n            <Card variant='outlined' className={classes.card}>\n              <CardContent>\n                <Typography variant='h6' align='center' color='secondary'>\n                  {date}\n                </Typography>\n                <br />\n                <Typography\n                  variant='h6'\n                  component='p'\n                  align='center'\n                  color='primary'\n                >\n                  High: {Math.round(day.temp.max)}°F\n                </Typography>\n                <Typography\n                  variant='h6'\n                  component='p'\n                  align='center'\n                  color='primary'\n                >\n                  Low: {Math.round(day.temp.min)}°F\n                </Typography>\n                <WeatherContainer variant='h6' weather={day.weather[0].main} />\n              </CardContent>\n            </Card>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n}\n\nexport default ForecastContainer;\n","import React from \"react\";\nimport { Box, Container, TextField } from \"@material-ui/core\";\nimport { useStyles } from \"../styles/styles\";\n\nfunction SearchBar(props) {\n  const classes = useStyles();\n  return (\n    <Box marginBottom={3}>\n      <Container maxWidth='sm'>\n        <TextField\n          variant='standard'\n          type='text'\n          placeholder='Search...'\n          fullWidth\n          color='secondary'\n          onChange={props.onChange}\n          value={props.value}\n          onKeyPress={props.keyPress}\n          InputProps={{\n            className: classes.input,\n          }}\n          className={classes.input}\n        />\n      </Container>\n    </Box>\n  );\n}\n\nexport default SearchBar;\n","import { ThemeProvider } from \"@material-ui/core\";\nimport { useState, useEffect, useRef } from \"react\";\nimport CurrentWeatherContainer from \"./components/CurrentWeatherContainer\";\nimport ErrorMessageContainer from \"./components/ErrorMessageContainer\";\nimport ForecastContainer from \"./components/ForecastContainer\";\nimport SearchBar from \"./components/SearchBar\";\n\nimport { theme } from \"./styles/styles\";\n\nimport { useStyles } from \"./styles/styles\";\n\nconst api = {\n  key: process.env.REACT_APP_WEATHER_API_KEY,\n  base: \"https://api.openweathermap.org/data/2.5/\",\n  forecastBase: \"https://api.openweathermap.org/data/2.5/onecall?\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [queryError, setQueryError] = useState(\"\");\n  const [forecast, setForecast] = useState([]);\n\n  const isInitialMount = useRef(true);\n  const classes = useStyles();\n\n  // Fetch data from OpenWeatherMap API and update weather state with response.\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=imperial&APPID=${api.key}`)\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.cod === \"404\") {\n            throw data;\n          } else {\n            setWeather(data);\n            setQuery(\"\");\n            setQueryError(\"\");\n          }\n        })\n        .catch((err) => {\n          setQueryError(err.message.toUpperCase());\n          setWeather(\"\");\n        });\n    }\n  };\n\n  //Prevent update on mount, which allows me to fetch forecast data after inital query of current weather. Only update if weather state changes.\n  useEffect(() => {\n    //Function to retrieve forecast data.\n    const fetchForecast = () => {\n      fetch(\n        `${api.forecastBase}lat=${weather.coord.lat}&lon=${weather.coord.lon}&units=imperial&exclude=minutely&appid=${api.key}`\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          setForecast(data.daily);\n        })\n        .catch((error) => console.log(error));\n    };\n\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      // If location invalid, do not run functions.\n      if (!weather) {\n        return;\n      } else {\n        fetchForecast();\n      }\n    }\n  }, [weather]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div\n        // Conditionally render background image depending on temperature.\n        className={\n          typeof weather.main !== \"undefined\"\n            ? weather.main.temp > \"70\"\n              ? \"app\"\n              : \"app cold\"\n            : \"app\"\n        }\n      >\n        <main>\n          <SearchBar\n            keyPress={search}\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n          />\n          {/* Conditionally render data interface after API call. If no data found, render error msg */}\n          {typeof weather.main !== \"undefined\" ? (\n            <>\n              <CurrentWeatherContainer weather={weather} />\n            </>\n          ) : (\n            <></>\n          )}\n          {queryError !== \"\" ? (\n            <ErrorMessageContainer queryError={queryError} />\n          ) : (\n            <></>\n          )}\n          {typeof weather.main !== \"undefined\" && forecast ? (\n            <section className={classes.forecast}>\n              <ForecastContainer forecast={forecast.slice(1)} />\n            </section>\n          ) : (\n            <></>\n          )}\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}